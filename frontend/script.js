// =========================
// üó∫Ô∏è C·∫§U H√åNH MAP
// =========================
const map = L.map('map').setView([10.7769, 106.7009], 13);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  maxZoom: 19,
  attribution: '&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors'
}).addTo(map);

let markers = [];

// =========================
// üç¥ B·ªò S∆ØU T·∫¨P ICON THEO LO·∫†I QU√ÅN
// =========================
const icons = {
  pho: L.icon({
    iconUrl: "icons/pho.png", // t√¥ ph·ªü
     iconSize: [26, 26],     
    iconAnchor: [13, 26],   
    popupAnchor: [0, -25]   
  }),
  cafe: L.icon({
    iconUrl: "icons/coffee.png", // t√°ch c√† ph√™
     iconSize: [26, 26],     
    iconAnchor: [13, 26],   
    popupAnchor: [0, -25]   
  }),
  tra_sua: L.icon({
    iconUrl: "icons/tra_sua.png", // ly tr√† s·ªØa
     iconSize: [26, 26],     
    iconAnchor: [13, 26],   
    popupAnchor: [0, -25]   
  }),
  bun: L.icon({
    iconUrl: "icons/pho.png", // t√¥ b√∫n
     iconSize: [26, 26],    
    iconAnchor: [13, 26],   
    popupAnchor: [0, -25]   
  }),
  com: L.icon({
    iconUrl: "https://cdn-icons-png.flaticon.com/512/3174/3174880.png", // ch√©n c∆°m
     iconSize: [26, 26],    
    iconAnchor: [13, 26],   
    popupAnchor: [0, -25]   
  }),
  default: L.icon({
    iconUrl: "icons/default.png", // dao nƒ©a m·∫∑c ƒë·ªãnh
     iconSize: [26, 26],     
    iconAnchor: [13, 26],   
    popupAnchor: [0, -25]   
  })
};

// =========================
// üß† H√ÄM X√ÅC ƒê·ªäNH LO·∫†I QU√ÅN T·ª™ T√äN
// =========================
function detectCategory(name = "") {
  name = name.toLowerCase();
  if (name.includes("ph·ªü")) return "pho";
  if (name.includes("c√† ph√™") || name.includes("coffee")) return "cafe";
  if (name.includes("tr√† s·ªØa")) return "tra_sua";
  if (name.includes("b√∫n") || name.includes("b√°nh canh") || name.includes("b√≤ hu·∫ø")) return "bun";
  if (name.includes("c∆°m") || name.includes("com")) return "com";
  return "default";
}

// =========================
// üîç H√ÄM HI·ªÇN TH·ªä MARKER
// =========================
function displayPlaces(places) {
  // Xo√° marker c≈©
  markers.forEach(m => map.removeLayer(m));
  markers = [];

  console.log("üìÇ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", places);

  if (!places || places.length === 0) {
    alert("Kh√¥ng t√¨m th·∫•y qu√°n n√†o!");
    return;
  }

  // Duy·ªát qua t·ª´ng ƒë·ªãa ƒëi·ªÉm
  places.forEach(p => {
    const lat = parseFloat(p.lat);
    const lon = parseFloat(p.lon);
    if (isNaN(lat) || isNaN(lon)) return;

    // X√°c ƒë·ªãnh icon theo lo·∫°i qu√°n
    const category = detectCategory(p.ten_quan);
    const icon = icons[category] || icons.default;

    const marker = L.marker([lat, lon], { icon }).addTo(map);

    const popupContent = `
      <div style="min-width:220px; font-family:sans-serif;">
        <h4 style="margin:0 0 5px 0;">${p.ten_quan || "Kh√¥ng t√™n"}</h4>
        ${p.hinh_anh ? `<img src="${p.hinh_anh}" width="200" style="border-radius:8px;margin-bottom:5px">` : ""}
        <p><b>ƒê·ªãa ch·ªâ:</b> ${p.dia_chi || "Kh√¥ng r√µ"}</p>
        <p><b>ƒêi·ªán tho·∫°i:</b> ${p.so_dien_thoai || "Kh√¥ng c√≥"}</p>
        <p><b>ƒê√°nh gi√°:</b> ‚≠ê ${p.rating || "Ch∆∞a c√≥"}</p>
        <p><b>Gi·ªù m·ªü c·ª≠a:</b> ${p.gio_mo_cua || "Kh√¥ng r√µ"}</p>
        <p><b>Gi√° trung b√¨nh:</b> ${p.gia_trung_binh || "?"}</p>
      </div>
    `;

    marker.bindPopup(popupContent);

// üß≠ Khi click v√†o marker -> zoom ƒë·∫øn marker ƒë√≥
    marker.on("click", () => {
    map.setView([lat, lon], 17, { animate: true }); // zoom level 17, c√≥ animation
});

    markers.push(marker);

  });

  // Zoom khung b·∫£n ƒë·ªì v·ª´a ƒë·ªß ch·ª©a t·∫•t c·∫£ marker
  const group = new L.featureGroup(markers);
  map.fitBounds(group.getBounds().pad(0.2));
}

// =========================
// üì° G·ªåI API L·∫§Y D·ªÆ LI·ªÜU T·ª™ CSV
// =========================
async function fetchPlaces(query = "") {
  try {
    const url = "/api/places";
    const res = await fetch(url);
    const data = await res.json();

    const filtered = query
      ? data.filter(p => p.ten_quan && p.ten_quan.toLowerCase().includes(query.toLowerCase()))
      : data;

    displayPlaces(filtered);
  } catch (err) {
    console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", err);
    alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ server!");
  }
}

// =========================
// üéØ S·ª∞ KI·ªÜN N√öT "T√åM"
// =========================
document.getElementById("btnSearch").addEventListener("click", () => {
  const query = document.getElementById("query").value.trim();
  fetchPlaces(query);
});

// ‚úÖ T·ª± ƒë·ªông hi·ªÉn th·ªã t·∫•t c·∫£ qu√°n khi m·ªü trang
fetchPlaces();

// =========================
// ‚ú® G·ª¢I √ù T·ª∞ ƒê·ªòNG & ENTER SEARCH
// =========================
const queryInput = document.getElementById("query");
const suggestionsBox = document.getElementById("suggestions");
let allPlaces = [];

// L·∫•y to√†n b·ªô d·ªØ li·ªáu ƒë·ªÉ ph·ª•c v·ª• autocomplete
async function preloadPlaces() {
  try {
    const res = await fetch("/api/places");
    allPlaces = await res.json();
  } catch (err) {
    console.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu autocomplete:", err);
  }
}

// Hi·ªÉn th·ªã g·ª£i √Ω theo t·ª´ kh√≥a nh·∫≠p
queryInput.addEventListener("input", () => {
  const keyword = queryInput.value.trim().toLowerCase();
  suggestionsBox.innerHTML = "";

  if (!keyword) {
    suggestionsBox.classList.remove("show");
    return;
  }

  const matched = allPlaces
    .filter(p => p.ten_quan && p.ten_quan.toLowerCase().includes(keyword))
    .slice(0, 5);

  if (matched.length === 0) {
    suggestionsBox.classList.remove("show");
    return;
  }

  matched.forEach(p => {
    const div = document.createElement("div");
    div.textContent = p.ten_quan;
    div.addEventListener("click", () => {
      queryInput.value = p.ten_quan;
      suggestionsBox.classList.remove("show");
      fetchPlaces(p.ten_quan);
    });
    suggestionsBox.appendChild(div);
  });

  suggestionsBox.classList.add("show");
});

// G·ªçi tr∆∞·ªõc ƒë·ªÉ load d·ªØ li·ªáu autocomplete
preloadPlaces();

// =========================
// üìç ƒê·ªäNH V·ªä GPS NG∆Ø·ªúI D√ôNG
// =========================
const locateBtn = document.getElementById("locate-btn");
let userMarker = null;
let accuracyCircle = null;

locateBtn.addEventListener("click", () => {
  if (!navigator.geolocation) {
    alert("Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã GPS!");
    return;
  }

  locateBtn.innerHTML = "‚è≥"; // loading icon
  navigator.geolocation.getCurrentPosition(
    (pos) => {
      const lat = pos.coords.latitude;
      const lon = pos.coords.longitude;
      const accuracy = pos.coords.accuracy;

      // Xo√° marker c≈© n·∫øu c√≥
      if (userMarker) map.removeLayer(userMarker);
      if (accuracyCircle) map.removeLayer(accuracyCircle);

      // T·∫°o marker ng∆∞·ªùi d√πng
      userMarker = L.marker([lat, lon], {
        title: "V·ªã tr√≠ c·ªßa b·∫°n",
        icon: L.divIcon({
          className: "user-marker",
          html: '<div style="width:14px;height:14px;background:#0078ff;border-radius:50%;border:3px solid white;box-shadow:0 0 4px rgba(0,0,0,0.4);"></div>',
        }),
      }).addTo(map);

      // T·∫°o v√≤ng tr√≤n sai s·ªë
      accuracyCircle = L.circle([lat, lon], {
        radius: accuracy,
        color: "#0078ff",
        fillColor: "#0078ff",
        fillOpacity: 0.1,
      }).addTo(map);

      map.setView([lat, lon], 16, { animate: true });
      locateBtn.innerHTML = "üìç";
    },
    (err) => {
      console.error("L·ªói GPS:", err);
      alert("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ hi·ªán t·∫°i!");
      locateBtn.innerHTML = "üìç";
    },
    { enableHighAccuracy: true, timeout: 10000 }
  );
});
