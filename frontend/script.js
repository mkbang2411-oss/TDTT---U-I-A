// =========================
// üó∫Ô∏è C·∫§U H√åNH MAP
// =========================
const map = L.map("map").setView([10.7769, 106.7009], 13);
L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
  maxZoom: 19,
  attribution:
    '&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors',
}).addTo(map);

let markers = [];
let currentRouteLine = null;
let routeControl = null;

// =========================
// üç¥ ICON T∆Ø∆†NG ·ª®NG LO·∫†I QU√ÅN
// =========================
const icons = {
  pho: L.icon({
    iconUrl: "icons/pho.png",
    iconSize: [26, 26],
    iconAnchor: [13, 26],
  }),
  cafe: L.icon({
    iconUrl: "icons/coffee.png",
    iconSize: [26, 26],
    iconAnchor: [13, 26],
  }),
  tra_sua: L.icon({
    iconUrl: "icons/tra_sua.png",
    iconSize: [26, 26],
    iconAnchor: [13, 26],
  }),
  bun: L.icon({
    iconUrl: "icons/bun.png",
    iconSize: [26, 26],
    iconAnchor: [13, 26],
  }),
  banh_mi: L.icon({
    iconUrl: "icons/banh_mi.png",
    iconSize: [26, 26],
    iconAnchor: [13, 26],
  }),
  banh_ngot: L.icon({
    iconUrl: "icons/banh_ngot.png",
    iconSize: [26, 26],
    iconAnchor: [13, 26],
  }),
  my_cay: L.icon({
    iconUrl: "icons/my_cay.png",
    iconSize: [26, 26],
    iconAnchor: [13, 26],
  }),
  com: L.icon({
    iconUrl: "https://cdn-icons-png.flaticon.com/512/3174/3174880.png",
    iconSize: [26, 26],
    iconAnchor: [13, 26],
  }),
  banh_kem: L.icon({
    iconUrl: "icons/banh_kem.png",
    iconSize: [26, 26],
    iconAnchor: [13, 26],
  }),
  default: L.icon({
    iconUrl: "icons/default.png",
    iconSize: [26, 26],
    iconAnchor: [13, 26],
  }),
};

// =========================
// üß† X√ÅC ƒê·ªäNH LO·∫†I QU√ÅN
// =========================
function detectCategory(name = "") {
  name = name.toLowerCase();
  if (name.includes("ph·ªü") || name.includes("pho")) return "pho";
  if (name.includes("c√† ph√™") || name.includes("coffee")) return "cafe";
  if (name.includes("tr√† s·ªØa") || name.includes("milk tea") || name.includes("bubble tea")) return "tra_sua";
  if (name.includes("b√∫n") || name.includes("bun bo") || name.includes("b√≤ hu·∫ø")) return "bun";
  if (name.includes("b√°nh m√¨") || name.includes("banh mi")) return "banh_mi";
  if (name.includes("b√°nh ng·ªçt") || name.includes("banh ngot") || name.includes("cake") || name.includes("dessert")) return "banh_ngot";
  if (name.includes("m√¨ cay") || name.includes("mi cay") || name.includes("spicy noodles") || name.includes("ramen")) return "my_cay";
  if (name.includes("c∆°m") || name.includes("com") || name.includes("rice")) return "com";
  if (name.includes("b√°nh kem") || name.includes("banh kem") || name.includes("cake") || name.includes("birthday cake")) return "banh_kem";
  return "default";
}

// =========================
// üí¨ HI·ªÇN TH·ªä REVIEW GI·ªêNG GOOGLE MAPS
// =========================
function renderReviews(googleReviews, userReviews) {
  const allReviews = [...googleReviews, ...userReviews];
  const avgRating =
    allReviews.length > 0
      ? (
          allReviews.reduce((sum, r) => sum + (r.rating || 0), 0) /
          allReviews.length
        ).toFixed(1)
      : "Ch∆∞a c√≥";

  const starCount = [5, 4, 3, 2, 1].map(
    (s) => allReviews.filter((r) => r.rating === s).length
  );

  const maxCount = Math.max(...starCount, 1);

  return `
    <div class="review-summary">
      <div class="review-average">
        <div class="review-score">${avgRating}</div>
        <div class="review-stars">${"‚≠ê".repeat(Math.round(avgRating) || 0)}</div>
        <div class="review-total">${allReviews.length} ƒë√°nh gi√°</div>
      </div>

      <div class="review-bars">
        ${[5, 4, 3, 2, 1]
          .map(
            (s, i) => `
          <div class="bar-row">
            <span>${s}‚≠ê</span>
            <div class="bar">
              <div class="fill" style="width:${
                (starCount[i] / maxCount) * 100
              }%"></div>
            </div>
            <span>${starCount[i]}</span>
          </div>
        `
          )
          .join("")}
      </div>
    </div>

    <div class="review-list">
      ${
        allReviews.length === 0
          ? "<p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.</p>"
          : allReviews
              .map(
                (r) => `
        <div class="review-card">
          <div class="review-header">
            <img src="${
              r.avatar ||
              "https://cdn-icons-png.flaticon.com/512/847/847969.png"
            }" class="review-avatar">
            <div>
              <div class="review-author">${r.user || r.ten || "·∫®n danh"}</div>
              <div class="review-stars">${"‚≠ê".repeat(r.rating || 0)}</div>
              <div class="review-time">${r.date || ""}</div>
            </div>
          </div>
          <div class="review-text">${r.comment || ""}</div>
        </div>`)
              .join("")
      }
    </div>
  `;
}

// =========================
// üîç HI·ªÇN TH·ªä MARKER + TH√îNG TIN CHI TI·∫æT
// =========================
function displayPlaces(places) {
  markers.forEach((m) => map.removeLayer(m));
  markers = [];

  if (!places || places.length === 0) {
    alert("Kh√¥ng t√¨m th·∫•y qu√°n n√†o!");
    return;
  }

  places.forEach((p) => {
    const lat = parseFloat(p.lat);
    const lon = parseFloat(p.lon);
    if (isNaN(lat) || isNaN(lon)) return;

    const category = detectCategory(p.ten_quan);
    const icon = icons[category] || icons.default;
    const marker = L.marker([lat, lon], { icon }).addTo(map);

    marker.on("click", async () => {
      map.setView([lat, lon], 17, { animate: true });
      const sidebar = document.getElementById("sidebar");
      const sidebarContent = document.getElementById("sidebar-content");

      const place_id = p.data_id || p.ten_quan;
      let googleReviews = [];
      let userReviews = [];

      try {
        const res = await fetch(`/api/reviews/${place_id}`);
        if (res.ok) {
          const reviewData = await res.json();
          googleReviews = reviewData.google || [];
          userReviews = reviewData.user || [];
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i review:", err);
      }

      const tongquanHTML = `
        <h2>${p.ten_quan || "Kh√¥ng t√™n"}</h2>
        ${
          p.hinh_anh
            ? `<img src="${p.hinh_anh}" style="width:100%;border-radius:10px;margin-bottom:10px;">`
            : ""
        }
        <p><i class="fa-solid fa-location-dot"></i> ${p.dia_chi || "Kh√¥ng r√µ"}</p>
        <p><i class="fa-solid fa-phone"></i> ${p.so_dien_thoai || "Kh√¥ng c√≥"}</p>
        <p><i class="fa-solid fa-star"></i> ${p.rating || "Ch∆∞a c√≥"}</p>
        <p><i class="fa-regular fa-clock"></i> ${p.gio_mo_cua || "Kh√¥ng r√µ"}</p>
        <p><i class="fa-solid fa-coins"></i> ${p.gia_trung_binh || "Kh√¥ng c√≥"}</p>
      `;

      const thucdonHTML = `
  ${
    p.thuc_don
      ? p.thuc_don
          .split(/[;,]+/)
          .map((img) => `<img src="${img.trim()}" class="menu-img" alt="Th·ª±c ƒë∆°n">`)
          .join("")
      : "<p>Kh√¥ng c√≥ h√¨nh th·ª±c ƒë∆°n.</p>"
  }
`;

      const danhgiaHTML = `
  <div class="review-section">
    ${renderReviews(googleReviews, userReviews)}

    <div class="review-form">
      <h3>üìù Th√™m ƒë√°nh gi√° c·ªßa b·∫°n</h3>
      <input type="text" id="reviewName" placeholder="T√™n c·ªßa b·∫°n" />

      <div class="star-rating" id="starRating">
        <span class="star" data-value="1">‚òÖ</span>
        <span class="star" data-value="2">‚òÖ</span>
        <span class="star" data-value="3">‚òÖ</span>
        <span class="star" data-value="4">‚òÖ</span>
        <span class="star" data-value="5">‚òÖ</span>
      </div>

      <textarea id="reviewComment" placeholder="C·∫£m nh·∫≠n c·ªßa b·∫°n..."></textarea>
      <button id="submitReview">G·ª≠i ƒë√°nh gi√°</button>
    </div>
  </div>
`;

      const contentHTML = `
  <div class="sidebar-header">
    <h2>Th√¥ng tin chi ti·∫øt</h2>
    <button id="closeSidebar" class="close-btn">√ó</button>
  </div>

  <div class="tab-bar">
    <button class="tab-btn active" data-tab="tongquan">T·ªïng quan</button>
    <button class="tab-btn" data-tab="thucdon">Th·ª±c ƒë∆°n</button>
    <button class="tab-btn" data-tab="danhgia">ƒê√°nh gi√°</button>
  </div>

  <div id="tab-tongquan" class="tab-content active">${tongquanHTML}</div>
  <div id="tab-thucdon" class="tab-content">${thucdonHTML}</div>
  <div id="tab-danhgia" class="tab-content">${danhgiaHTML}</div>
`;
      sidebarContent.innerHTML = contentHTML;
      sidebar.classList.add("show");
      // N√öT ƒê√ìNG SIDEBAR
      const closeBtn = document.getElementById("closeSidebar");
      closeBtn.addEventListener("click", () => {
          sidebar.classList.remove("show");

          // N·∫øu ƒëang c√≥ route hi·ªÉn th·ªã, x√≥a lu√¥n
          if (routeControl) {
              map.removeControl(routeControl);
              routeControl = null;
          }
      });

      // =========================
      // üöó N√öT T√åM ƒê∆Ø·ªúNG ƒêI
      // =========================
      const tongquanTab = sidebarContent.querySelector("#tab-tongquan");
      const routeBtn = document.createElement("button");
      routeBtn.textContent = "üìç T√¨m ƒë∆∞·ªùng ƒëi";
      routeBtn.className = "route-btn";
      tongquanTab.appendChild(routeBtn);
      
      routeBtn.addEventListener("click", () => {
        if (!navigator.geolocation) {
          alert("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã!");
          return;
        }

        navigator.geolocation.getCurrentPosition(
  (pos) => {
    const userLat = pos.coords.latitude;
    const userLon = pos.coords.longitude;

    // üß≠ Th√™m marker v·ªã tr√≠ ng∆∞·ªùi d√πng
    L.marker([userLat, userLon], {
      icon: L.icon({
        iconUrl: "https://cdn-icons-png.flaticon.com/512/25/25694.png",
        iconSize: [28, 28],
        iconAnchor: [14, 28],
      }),
    })
      .addTo(map)
      .bindPopup("üìç V·ªã tr√≠ c·ªßa b·∫°n")
      .openPopup();

    // üîπ X√≥a routeControl c≈© n·∫øu c√≥
    if (routeControl) {
      map.removeControl(routeControl);
      routeControl = null;
    }

    // üöó T·∫°o route m·ªõi
    routeControl = L.Routing.control({
      waypoints: [
        L.latLng(userLat, userLon),
        L.latLng(lat, lon)
      ],
      lineOptions: {
        styles: [{ color: "blue", weight: 5, opacity: 0.7 }]
      },
      show: false,
      addWaypoints: false,
      routeWhileDragging: false,
      createMarker: (i, wp) => {
        return L.marker(wp.latLng, {
          icon: i === 0
            ? L.icon({
                iconUrl: "https://cdn-icons-png.flaticon.com/512/25/25694.png",
                iconSize: [24, 24],
                iconAnchor: [12, 24]
              })
            : L.icon({
                iconUrl: "https://cdn-icons-png.flaticon.com/512/684/684908.png",
                iconSize: [24, 24],
                iconAnchor: [12, 24]
              })
        });
      }
    }).addTo(map);


            // Khi tuy·∫øn ƒë∆∞·ª£c t√¨m th·∫•y, hi·ªÉn th·ªã info v√† zoom
            routeControl.on("routesfound", (e) => {
              const route = e.routes[0];
              const bounds = L.latLngBounds(route.coordinates);
              map.fitBounds(bounds, { padding: [50, 50] });

              const distanceKm = (route.summary.totalDistance / 1000).toFixed(1); // km
              const durationMin = Math.ceil(route.summary.totalTime / 60); // ph√∫t

              let infoEl = tongquanTab.querySelector(".route-info");
              if (!infoEl) {
                infoEl = document.createElement("p");
                infoEl.className = "route-info";
                tongquanTab.appendChild(infoEl);
              }
              infoEl.innerHTML = `üõ£Ô∏è Qu√£ng ƒë∆∞·ªùng: ${distanceKm} km<br>‚è±Ô∏è Th·ªùi gian: ${durationMin} ph√∫t`;
            });
          },
          () => alert("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ hi·ªán t·∫°i!")
        );

      });
sidebar.classList.add("show");

// G·∫Øn s·ª± ki·ªán sau khi ph·∫ßn t·ª≠ ƒë√£ render v√†o DOM
setTimeout(() => {
  const closeBtn = document.getElementById("closeSidebar");
  if (closeBtn) {
    closeBtn.onclick = () => {
      sidebar.classList.remove("show");
    };
  }
}, 0);

      // üéØ Chuy·ªÉn tab
      const tabs = sidebarContent.querySelectorAll(".tab-btn");
      const tabContents = sidebarContent.querySelectorAll(".tab-content");
      tabs.forEach((btn) => {
        btn.addEventListener("click", () => {
          tabs.forEach((b) => b.classList.remove("active"));
          tabContents.forEach((c) => c.classList.remove("active"));
          btn.classList.add("active");
          document.getElementById(`tab-${btn.dataset.tab}`).classList.add("active");
        });
      });

      // ‚≠ê G·ª≠i ƒë√°nh gi√°
      let selectedRating = 0;
      document.querySelectorAll("#starRating .star").forEach((star) => {
        star.addEventListener("click", () => {
          selectedRating = parseInt(star.dataset.value);
          document.querySelectorAll("#starRating .star").forEach((s, i) => {
            s.classList.toggle("active", i < selectedRating);
          });
        });
      });

      document.getElementById("submitReview").addEventListener("click", async () => {
        const review = {
          ten: document.getElementById("reviewName").value.trim(),
          rating: selectedRating,
          comment: document.getElementById("reviewComment").value.trim(),
        };

        if (!review.ten || !review.comment || review.rating === 0) {
          alert("Vui l√≤ng nh·∫≠p t√™n, n·ªôi dung v√† ch·ªçn s·ªë sao!");
          return;
        }

        await fetch(`/api/reviews/${place_id}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(review),
        });

        alert("‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒë√°nh gi√°!");
        marker.fire("click");
      });
    });

    markers.push(marker);
  });

  const group = new L.featureGroup(markers);
  map.fitBounds(group.getBounds().pad(0.2));
}

// =========================
// üì° L·∫§Y D·ªÆ LI·ªÜU CSV
// =========================
async function fetchPlaces(query = "") {
  try {
    const res = await fetch("/api/places");
    const data = await res.json();

    const filtered = query
      ? data.filter((p) => p.ten_quan && p.ten_quan.toLowerCase().includes(query.toLowerCase()))
      : data;

    displayPlaces(filtered);
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", err);
    alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ server!");
  }
}

// =========================
// üéØ T√åM KI·∫æM
// =========================
document.getElementById("btnSearch").addEventListener("click", () => {
  const query = document.getElementById("query").value.trim();
  fetchPlaces(query);
});

fetchPlaces();

// =========================
// üí° G·ª¢I √ù T√åM KI·∫æM (AUTOCOMPLETE) - S·ª¨ D·ª§NG #suggestions HI·ªÜN C√ì TRONG HTML
// =========================
const input = document.getElementById("query");
const suggestionsEl = document.getElementById("suggestions");
let allPlacesCache = [];

// T·∫£i to√†n b·ªô danh s√°ch qu√°n (1 l·∫ßn)
(async () => {
  try {
    const res = await fetch("/api/places");
    allPlacesCache = await res.json();
  } catch (err) {
    console.error("‚ùå L·ªói t·∫£i d·ªØ li·ªáu g·ª£i √Ω:", err);
  }
})();

input.addEventListener("input", () => {
  const text = input.value.trim().toLowerCase();
  suggestionsEl.innerHTML = ""; // clear

  if (text.length === 0) {
    suggestionsEl.classList.remove("show");
    return;
  }

  // l·ªçc, gi·ªõi h·∫°n 8 k·∫øt qu·∫£
  const filtered = allPlacesCache
    .filter((p) => p.ten_quan && p.ten_quan.toLowerCase().includes(text))
    .slice(0, 8);

  if (filtered.length === 0) {
    suggestionsEl.classList.remove("show");
    return;
  }

  // t·∫°o c√°c div g·ª£i √Ω (t∆∞∆°ng th√≠ch v·ªõi CSS .suggestions)
  filtered.forEach((p) => {
    const div = document.createElement("div");
    const cat = detectCategory(p.ten_quan);
    const iconUrl = icons[cat] ? icons[cat].options.iconUrl : icons.default.options.iconUrl;

    // highlight t·ª´ kh√≥a trong t√™n (v√≠ d·ª•: "ph·ªü" -> <b>ph·ªü</b>)
    const name = p.ten_quan;
    const idx = name.toLowerCase().indexOf(text);
    let displayName = name;
    if (idx >= 0) {
      displayName = `${name.slice(0, idx)}<strong>${name.slice(idx, idx + text.length)}</strong>${name.slice(idx + text.length)}`;
    }

    div.innerHTML = `<img src="${iconUrl}" style="width:20px;height:20px;margin-right:8px;object-fit:contain;"> <div style="flex:1">${displayName}</div>`;
    div.addEventListener("click", () => {
      input.value = p.ten_quan;
      suggestionsEl.classList.remove("show");
      fetchPlaces(p.ten_quan);
    });
    suggestionsEl.appendChild(div);
  });

  suggestionsEl.classList.add("show");
});

// ·∫©n g·ª£i √Ω khi click ra ngo√†i h·ªôp t√¨m ki·∫øm
document.addEventListener("click", (e) => {
  const searchBox = document.querySelector(".search-box");
  if (!searchBox.contains(e.target)) {
    suggestionsEl.classList.remove("show");
  }
});
// ‚úÖ X·ª≠ l√Ω ƒë√≥ng sidebar (lu√¥n ho·∫°t ƒë·ªông, d√π sidebarContent b·ªã thay ƒë·ªïi)
document.addEventListener("click", (e) => {
  if (e.target && e.target.id === "closeSidebar") {
    document.getElementById("sidebar").classList.remove("show");
  }
});

// =========================
// üìç N√öT ƒê·ªäNH V·ªä GPS TR√äN GIAO DI·ªÜN CH√çNH
// =========================
document.getElementById("locate-btn").addEventListener("click", () => {
  if (!navigator.geolocation) {
    alert("Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã GPS!");
    return;
  }

  navigator.geolocation.getCurrentPosition(
    (pos) => {
      const userLat = pos.coords.latitude;
      const userLon = pos.coords.longitude;

      // üîπ Th√™m marker v·ªã tr√≠ ng∆∞·ªùi d√πng
      L.marker([userLat, userLon], {
        icon: L.icon({
          iconUrl: "https://cdn-icons-png.flaticon.com/512/25/25694.png",
          iconSize: [28, 28],
          iconAnchor: [14, 28],
        }),
      })
        .addTo(map)
        .bindPopup("üìç V·ªã tr√≠ c·ªßa b·∫°n")
        .openPopup();

      // üîπ Zoom v√†o v·ªã tr√≠ ng∆∞·ªùi d√πng
      map.setView([userLat, userLon], 15);
    },
    (err) => {
      alert("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ c·ªßa b·∫°n: " + err.message);
    }
  );
});

// =========================
// üñºÔ∏è CLICK ·∫¢NH -> PH√ìNG TO
// =========================
document.addEventListener("click", (e) => {
  if (e.target.tagName === "IMG" && e.target.closest(".tab-content")) {
    const src = e.target.src;
    const modal = document.getElementById("imageModal");
    const modalImg = document.getElementById("modalImg");
    modalImg.src = src;
    modal.style.display = "flex";
  }
});

document.getElementById("closeModal").addEventListener("click", () => {
  document.getElementById("imageModal").style.display = "none";
});

document.getElementById("imageModal").addEventListener("click", (e) => {
  if (e.target.id === "imageModal") {
    e.currentTarget.style.display = "none";
  }
});
